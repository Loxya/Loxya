/* eslint-disable prefer-named-capture-group */

import colors from 'picocolors';

const SYNTAX_ERROR_LABEL = 'Syntax error:';

const isLikelyASyntaxError = (message) => (
    message.includes(SYNTAX_ERROR_LABEL)
);

// eslint-disable-next-line jsdoc/require-param
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license.
 */
const formatMessage = (message) => {
    let lines = [];
    if (typeof message === 'string') {
        lines = message.split('\n');
    } else if ('message' in message) {
        lines = message.message.split('\n');
    } else if (Array.isArray(message)) {
        message.forEach((_message) => {
            if ('message' in _message) {
                lines = _message.message.split('\n');
            }
        });
    }

    // Strip webpack-added headers off errors/warnings
    // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
    lines = lines.filter((line) => !/Module [A-z ]+\(from/.test(line));

    // Transform parsing error into syntax error.
    lines = lines.map((line) => {
        const parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);
        if (!parsingError) {
            return line;
        }
        const [, errorLine, errorColumn, errorMessage] = parsingError;
        return `${SYNTAX_ERROR_LABEL} ${errorMessage} (${errorLine}:${errorColumn})`;
    });

    message = lines.join('\n');

    // Smoosh syntax errors (commonly found in CSS)
    message = message.replaceAll(
        /SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g,
        `${SYNTAX_ERROR_LABEL} $3 ($1:$2)\n`,
    );

    // Clean up export errors
    message = message.replaceAll(
        /^.*export '(.+?)' was not found in '(.+?)'.*$/gm,
        `Attempted import error: '$1' is not exported from '$2'.`,
    );
    message = message.replaceAll(
        /^.*export 'default' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm,
        `Attempted import error: '$2' does not contain a default export (imported as '$1').`,
    );
    message = message.replaceAll(
        /^.*export '(.+?)' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm,
        `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`,
    );

    lines = message.split('\n');

    // Remove leading newline
    if (lines.length > 2 && lines[1].trim() === '') {
        lines.splice(1, 1);
    }

    // Clean up file name
    lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, '$1');

    // Cleans up verbose "module not found" messages for files and packages.
    if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
        lines = [
            lines[0],
            lines[1]
                .replace('Error: ', '')
                .replace('Module not found: Cannot find file:', 'Cannot find file:'),
        ];
    }

    message = lines.join('\n');

    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by webpack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
    message = message.replaceAll(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, ''); // at ... ...:x:y
    message = message.replaceAll(/^\s*at\s<anonymous>(\n|$)/gm, ''); // at <anonymous>
    lines = message.split('\n');

    // Remove duplicated newlines
    lines = lines.filter((line, index, arr) => (
        index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()
    ));

    // Reassemble the message
    message = lines.join('\n');
    return message.trim();
};

const outputWebpackBuildErrors = (stats) => {
    const json = stats.toJson({ all: false, warnings: true, errors: true });

    // - Erreurs.
    let errors = json.errors.map(formatMessage);
    if (errors.some(isLikelyASyntaxError)) {
        // - S'il y a des erreurs de syntaxe, affiche uniquement celles-ci.
        errors = errors.filter(isLikelyASyntaxError);
    }
    if (errors.length > 0) {
        // - Ne conserve que la première erreur. Les autres sont souvent
        //   liées au même problème, mais brouillent la lecture.
        if (errors.length > 1) {
            errors.length = 1;
        }
        console.log(colors.red('Erreur lors de la compilation.\n'));
        console.log(errors.join('\n\n'));
        return;
    }

    // - Avertissements.
    const warnings = json.warnings.map(formatMessage);
    if (warnings.length > 0) {
        console.log(colors.yellow('Compilation terminée avec des avertissements.\n'));
        console.log(warnings.join('\n\n'));
    }
};

export default outputWebpackBuildErrors;
